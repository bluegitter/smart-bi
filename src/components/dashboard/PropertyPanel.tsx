'use client'

import React from 'react'
import { X, Settings, Palette, Database, Filter, ChevronDown, ChevronRight, Plus, Trash2 } from 'lucide-react'
import { useDrop } from 'react-dnd'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'
import { cn } from '@/lib/utils'
import { useSidebarCollapsed, useIsFullscreen } from '@/store/useAppStore'
import type { ComponentLayout, DragItem } from '@/types'

interface PropertyPanelProps {
  isOpen: boolean
  onClose: () => void
  selectedComponent: ComponentLayout | null
  onUpdateComponent: (componentId: string, updates: Partial<ComponentLayout>) => void
  onUpdateChild?: (containerId: string, childId: string, updates: Partial<ComponentLayout>) => void
  parentContainerId?: string // Â¶ÇÊûúÈÄâ‰∏≠ÁöÑÊòØÂ≠êÁªÑ‰ª∂ÔºåËøôÈáåÂ≠òÂÇ®Áà∂ÂÆπÂô®ID
}

const chartTypeOptions = [
  { value: 'line-chart', label: 'ÊäòÁ∫øÂõæ', icon: 'üìà' },
  { value: 'bar-chart', label: 'Êü±Áä∂Âõæ', icon: 'üìä' },
  { value: 'pie-chart', label: 'È•ºÂõæ', icon: 'ü•ß' },
  { value: 'table', label: 'Êï∞ÊçÆË°®', icon: 'üìã' },
  { value: 'kpi-card', label: 'ÊåáÊ†áÂç°Áâá', icon: 'üìå' },
  { value: 'gauge', label: '‰ª™Ë°®Áõò', icon: '‚è∞' },
  { value: 'container', label: 'ÂÆπÂô®ÁªÑ‰ª∂', icon: 'üì¶' }
]

const colorSchemes = [
  { name: 'ÈªòËÆ§', colors: ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6'] },
  { name: 'ËìùËâ≤Á≥ª', colors: ['#1e40af', '#3b82f6', '#60a5fa', '#93c5fd', '#dbeafe'] },
  { name: 'ÁªøËâ≤Á≥ª', colors: ['#166534', '#16a34a', '#22c55e', '#4ade80', '#bbf7d0'] },
  { name: 'Á¥´Ëâ≤Á≥ª', colors: ['#7c3aed', '#8b5cf6', '#a78bfa', '#c4b5fd', '#e9d5ff'] },
  { name: 'ÊöñËâ≤Á≥ª', colors: ['#dc2626', '#ea580c', '#f59e0b', '#eab308', '#84cc16'] }
]

// ÂèØÊãñÊãΩÂå∫ÂüüÁªÑ‰ª∂
function DropZone({ 
  type, 
  items = [], 
  onDrop, 
  onRemove,
  placeholder = "ÊãñÊãΩÈ°πÁõÆÂà∞ËøôÈáå"
}: {
  type: 'metrics' | 'dimensions'
  items: string[]
  onDrop: (item: DragItem) => void
  onRemove: (index: number) => void
  placeholder?: string
}) {
  const [{ isOver, canDrop }, drop] = useDrop(() => ({
    accept: 'dataset-field',
    drop: (item: DragItem) => {
      // Ê£ÄÊü•Â≠óÊÆµÁ±ªÂûãÊòØÂê¶ÂåπÈÖçÊãñÊãΩÂå∫ÂüüÁ±ªÂûã
      const fieldType = item.data?.field?.fieldType
      const isValidDrop = (type === 'metrics' && fieldType === 'measure') || 
                         (type === 'dimensions' && fieldType === 'dimension')
      
      if (isValidDrop) {
        onDrop(item)
      }
    },
    canDrop: (item: DragItem) => {
      const fieldType = item.data?.field?.fieldType
      return (type === 'metrics' && fieldType === 'measure') || 
             (type === 'dimensions' && fieldType === 'dimension')
    },
    collect: (monitor) => ({
      isOver: monitor.isOver(),
      canDrop: monitor.canDrop()
    })
  }))

  return (
    <div
      ref={drop}
      className={cn(
        "min-h-[60px] p-3 border-2 border-dashed rounded-lg transition-colors",
        canDrop ? "border-blue-300 bg-blue-50" : "border-slate-200",
        isOver && canDrop ? "border-blue-400 bg-blue-100" : "",
        !canDrop && isOver ? "border-red-300 bg-red-50" : ""
      )}
    >
      {items.length === 0 ? (
        <div className="text-sm text-slate-500 text-center py-2">
          {placeholder}
        </div>
      ) : (
        <div className="space-y-2">
          {items.map((item, index) => (
            <div key={index} className="flex items-center justify-between p-2 bg-white border border-slate-200 rounded">
              <span className="text-sm flex-1 truncate">{item}</span>
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-6 w-6 text-red-500 hover:text-red-700 hover:bg-red-50"
                onClick={() => onRemove(index)}
              >
                <X className="h-3 w-3" />
              </Button>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

export function PropertyPanel({ isOpen, onClose, selectedComponent, onUpdateComponent, onUpdateChild, parentContainerId }: PropertyPanelProps) {
  const [activeSection, setActiveSection] = React.useState<string>('basic')
  const [expandedSections, setExpandedSections] = React.useState<Record<string, boolean>>({
    basic: true,
    style: true,
    data: true,
    advanced: false
  })
  
  // ËøáÊª§Âô®Áä∂ÊÄÅ
  const [filters, setFilters] = React.useState<Array<{
    field: string
    operator: string
    value: string
    id: string
  }>>(selectedComponent?.dataConfig?.filters || [])

  // Ëé∑ÂèñsidebarÂíåÂÖ®Â±èÁä∂ÊÄÅ
  const sidebarCollapsed = useSidebarCollapsed()
  const isFullscreen = useIsFullscreen()

  if (!isOpen || !selectedComponent) return null

  // ËÆ°ÁÆóÂ±ûÊÄßÈù¢ÊùøÁöÑ‰ΩçÁΩÆ
  // ÂΩìsidebarÊäòÂè†ÊàñÂÖ®Â±èÊó∂ÔºåÈù¢Êùø‰ΩçÁΩÆ‰∏∫ right-0
  // ÂΩìsidebarÂ±ïÂºÄÊó∂ÔºåÈù¢Êùø‰ΩçÁΩÆÈúÄË¶ÅËÄÉËôësidebarÁöÑÂÆΩÂ∫¶(320px)
  const panelRight = (sidebarCollapsed || isFullscreen) ? 0 : 0

  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }))
  }

  const handleUpdate = (updates: Partial<ComponentLayout>) => {
    // Â¶ÇÊûúÈÄâ‰∏≠ÁöÑÊòØÂÆπÂô®Â≠êÁªÑ‰ª∂Ôºå‰ΩøÁî®ÁâπÊÆäÁöÑÊõ¥Êñ∞ÈÄªËæë
    if (parentContainerId && onUpdateChild) {
      onUpdateChild(parentContainerId, selectedComponent.id, updates)
    } else {
      // ÊôÆÈÄöÁªÑ‰ª∂Êõ¥Êñ∞
      onUpdateComponent(selectedComponent.id, updates)
    }
  }

  const handleChartTypeChange = (newType: ComponentLayout['type']) => {
    handleUpdate({ type: newType })
  }

  const handleTitleChange = (newTitle: string) => {
    handleUpdate({ title: newTitle })
  }

  const handleStyleUpdate = (styleUpdates: any) => {
    handleUpdate({
      config: {
        ...selectedComponent.config,
        style: {
          ...selectedComponent.config.style,
          ...styleUpdates
        }
      }
    })
  }

  const handleChartConfigUpdate = (chartUpdates: any) => {
    handleUpdate({
      config: {
        ...selectedComponent.config,
        chart: {
          ...selectedComponent.config?.chart,
          ...chartUpdates
        }
      }
    })
  }

  const handleTableConfigUpdate = (tableUpdates: any) => {
    handleUpdate({
      config: {
        ...selectedComponent.config,
        table: {
          ...selectedComponent.config?.table,
          ...tableUpdates
        }
      }
    })
  }

  const handleKPIConfigUpdate = (kpiUpdates: any) => {
    handleUpdate({
      config: {
        ...selectedComponent.config,
        kpi: {
          ...selectedComponent.config?.kpi,
          ...kpiUpdates
        }
      }
    })
  }

  const handleGaugeConfigUpdate = (gaugeUpdates: any) => {
    handleUpdate({
      config: {
        ...selectedComponent.config,
        gauge: {
          ...selectedComponent.config?.gauge,
          ...gaugeUpdates
        }
      }
    })
  }

  const handleContainerConfigUpdate = (containerUpdates: any) => {
    handleUpdate({
      containerConfig: {
        ...selectedComponent.containerConfig,
        ...containerUpdates
      }
    })
  }

  // Â§ÑÁêÜÊï∞ÊçÆÈÖçÁΩÆÊõ¥Êñ∞
  const handleDataConfigUpdate = (dataUpdates: any) => {
    const currentDataConfig = selectedComponent.dataConfig || {}
    handleUpdate({
      dataConfig: {
        ...currentDataConfig,
        ...dataUpdates
      }
    })
  }

  // Â§ÑÁêÜÊåáÊ†áÊãñÊãΩ
  const handleMetricDrop = (item: DragItem) => {
    const field = item.data?.field
    if (!field) return
    
    const currentDataConfig = selectedComponent.dataConfig || {}
    const currentMetrics = currentDataConfig.metrics || []
    const currentDimensions = currentDataConfig.dimensions || []
    const currentFilters = currentDataConfig.filters || []
    const currentFieldDisplayNames = currentDataConfig.fieldDisplayNames || {}
    const fieldDisplayName = field.displayName || field.name
    
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
    if (!currentMetrics.includes(fieldDisplayName)) {
      const newMetrics = [...currentMetrics, fieldDisplayName]
      
      // ÂÆåÊï¥Êõ¥Êñ∞ÔºåÁ°Æ‰øù‰∏ç‰∏¢Â§±ÂÖ∂‰ªñÊï∞ÊçÆ
      handleDataConfigUpdate({
        metrics: newMetrics,
        dimensions: currentDimensions, // ‰øùÊåÅÁª¥Â∫¶‰∏çÂèò
        filters: currentFilters, // ‰øùÊåÅËøáÊª§Âô®‰∏çÂèò
        fieldDisplayNames: {
          ...currentFieldDisplayNames,
          [field.name]: field.displayName
        }
      })
    }
  }

  // Â§ÑÁêÜÁª¥Â∫¶ÊãñÊãΩ
  const handleDimensionDrop = (item: DragItem) => {
    const field = item.data?.field
    if (!field) return
    
    const currentDataConfig = selectedComponent.dataConfig || {}
    const currentMetrics = currentDataConfig.metrics || []
    const currentDimensions = currentDataConfig.dimensions || []
    const currentFilters = currentDataConfig.filters || []
    const currentFieldDisplayNames = currentDataConfig.fieldDisplayNames || {}
    const fieldDisplayName = field.displayName || field.name
    
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
    if (!currentDimensions.includes(fieldDisplayName)) {
      const newDimensions = [...currentDimensions, fieldDisplayName]
      
      // ÂÆåÊï¥Êõ¥Êñ∞ÔºåÁ°Æ‰øù‰∏ç‰∏¢Â§±ÂÖ∂‰ªñÊï∞ÊçÆ
      handleDataConfigUpdate({
        metrics: currentMetrics, // ‰øùÊåÅÊåáÊ†á‰∏çÂèò
        dimensions: newDimensions,
        filters: currentFilters, // ‰øùÊåÅËøáÊª§Âô®‰∏çÂèò
        fieldDisplayNames: {
          ...currentFieldDisplayNames,
          [field.name]: field.displayName
        }
      })
    }
  }

  // ÁßªÈô§ÊåáÊ†á
  const handleRemoveMetric = (index: number) => {
    const currentDataConfig = selectedComponent.dataConfig || {}
    const currentMetrics = currentDataConfig.metrics || []
    const currentDimensions = currentDataConfig.dimensions || []
    const currentFilters = currentDataConfig.filters || []
    const currentFieldDisplayNames = currentDataConfig.fieldDisplayNames || {}
    
    const newMetrics = currentMetrics.filter((_, i) => i !== index)
    
    handleDataConfigUpdate({
      metrics: newMetrics,
      dimensions: currentDimensions, // ‰øùÊåÅÁª¥Â∫¶‰∏çÂèò
      filters: currentFilters, // ‰øùÊåÅËøáÊª§Âô®‰∏çÂèò
      fieldDisplayNames: currentFieldDisplayNames // ‰øùÊåÅÊòæÁ§∫ÂêçÁß∞Êò†Â∞Ñ‰∏çÂèò
    })
  }

  // ÁßªÈô§Áª¥Â∫¶
  const handleRemoveDimension = (index: number) => {
    const currentDataConfig = selectedComponent.dataConfig || {}
    const currentMetrics = currentDataConfig.metrics || []
    const currentDimensions = currentDataConfig.dimensions || []
    const currentFilters = currentDataConfig.filters || []
    const currentFieldDisplayNames = currentDataConfig.fieldDisplayNames || {}
    
    const newDimensions = currentDimensions.filter((_, i) => i !== index)
    
    handleDataConfigUpdate({
      metrics: currentMetrics, // ‰øùÊåÅÊåáÊ†á‰∏çÂèò
      dimensions: newDimensions,
      filters: currentFilters, // ‰øùÊåÅËøáÊª§Âô®‰∏çÂèò
      fieldDisplayNames: currentFieldDisplayNames // ‰øùÊåÅÊòæÁ§∫ÂêçÁß∞Êò†Â∞Ñ‰∏çÂèò
    })
  }

  // Ê∑ªÂä†ËøáÊª§Âô®
  const handleAddFilter = () => {
    const currentDataConfig = selectedComponent.dataConfig || {}
    const currentMetrics = currentDataConfig.metrics || []
    const currentDimensions = currentDataConfig.dimensions || []
    const currentFieldDisplayNames = currentDataConfig.fieldDisplayNames || {}
    
    const newFilter = {
      id: `filter-${Date.now()}`,
      field: '',
      operator: '=',
      value: ''
    }
    const newFilters = [...filters, newFilter]
    setFilters(newFilters)
    
    handleDataConfigUpdate({
      metrics: currentMetrics, // ‰øùÊåÅÊåáÊ†á‰∏çÂèò
      dimensions: currentDimensions, // ‰øùÊåÅÁª¥Â∫¶‰∏çÂèò
      filters: newFilters,
      fieldDisplayNames: currentFieldDisplayNames // ‰øùÊåÅÊòæÁ§∫ÂêçÁß∞Êò†Â∞Ñ‰∏çÂèò
    })
  }

  // ÁßªÈô§ËøáÊª§Âô®
  const handleRemoveFilter = (filterId: string) => {
    const currentDataConfig = selectedComponent.dataConfig || {}
    const currentMetrics = currentDataConfig.metrics || []
    const currentDimensions = currentDataConfig.dimensions || []
    const currentFieldDisplayNames = currentDataConfig.fieldDisplayNames || {}
    
    const newFilters = filters.filter(f => f.id !== filterId)
    setFilters(newFilters)
    
    handleDataConfigUpdate({
      metrics: currentMetrics, // ‰øùÊåÅÊåáÊ†á‰∏çÂèò
      dimensions: currentDimensions, // ‰øùÊåÅÁª¥Â∫¶‰∏çÂèò
      filters: newFilters,
      fieldDisplayNames: currentFieldDisplayNames // ‰øùÊåÅÊòæÁ§∫ÂêçÁß∞Êò†Â∞Ñ‰∏çÂèò
    })
  }

  // Êõ¥Êñ∞ËøáÊª§Âô®
  const handleUpdateFilter = (filterId: string, updates: Partial<typeof filters[0]>) => {
    const currentDataConfig = selectedComponent.dataConfig || {}
    const currentMetrics = currentDataConfig.metrics || []
    const currentDimensions = currentDataConfig.dimensions || []
    const currentFieldDisplayNames = currentDataConfig.fieldDisplayNames || {}
    
    const newFilters = filters.map(f => 
      f.id === filterId ? { ...f, ...updates } : f
    )
    setFilters(newFilters)
    
    handleDataConfigUpdate({
      metrics: currentMetrics, // ‰øùÊåÅÊåáÊ†á‰∏çÂèò
      dimensions: currentDimensions, // ‰øùÊåÅÁª¥Â∫¶‰∏çÂèò
      filters: newFilters,
      fieldDisplayNames: currentFieldDisplayNames // ‰øùÊåÅÊòæÁ§∫ÂêçÁß∞Êò†Â∞Ñ‰∏çÂèò
    })
  }

  const currentChartType = chartTypeOptions.find(option => option.value === selectedComponent.type)

  const handleScrollCapture = (e: React.UIEvent) => {
    // ÈòªÊ≠¢ÊªöÂä®‰∫ã‰ª∂Âêë‰∏ä‰º†Êí≠Âà∞ÁîªÂ∏ÉÂå∫Âüü
    e.stopPropagation()
  }

  return (
    <div 
      className="fixed w-80 bg-white border-l border-slate-200 flex flex-col z-50 shadow-lg"
      style={{ 
        top: isFullscreen ? '0' : '64px', // HeaderÈ´òÂ∫¶64pxÔºåÂÖ®Â±èÊó∂‰ªéÈ°∂ÈÉ®ÂºÄÂßã
        height: isFullscreen ? '100vh' : 'calc(100vh - 64px)',
        right: panelRight,
        transition: 'right 0.3s ease-in-out'
      }}
    >
      {/* Â§¥ÈÉ® */}
      <div className="h-16 border-b border-slate-200 px-4 flex items-center justify-between flex-shrink-0">
        <div className="flex items-center gap-2">
          <Settings className="h-5 w-5 text-slate-600" />
          <span className="font-medium">ÁªÑ‰ª∂Â±ûÊÄß</span>
        </div>
        <Button variant="ghost" size="icon" onClick={onClose}>
          <X className="h-4 w-4" />
        </Button>
      </div>

      {/* ÂÜÖÂÆπÂå∫Âüü - Áã¨Á´ãÊªöÂä®ÂÆπÂô® */}
      <div 
        className="flex-1 overflow-y-auto min-h-0"
        style={{
          scrollbarWidth: 'thin',
          scrollbarColor: '#cbd5e1 transparent',
        }}
        onScroll={handleScrollCapture}
      >
        <div className="p-4 space-y-4">
          {/* Âü∫Á°ÄËÆæÁΩÆ */}
          <Card>
            <CardHeader 
              className="pb-2 cursor-pointer"
              onClick={() => toggleSection('basic')}
            >
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <Settings className="h-4 w-4" />
                  Âü∫Á°ÄËÆæÁΩÆ
                </CardTitle>
                {expandedSections.basic ? (
                  <ChevronDown className="h-4 w-4" />
                ) : (
                  <ChevronRight className="h-4 w-4" />
                )}
              </div>
            </CardHeader>
            {expandedSections.basic && (
              <CardContent className="pt-2 space-y-4">
                {/* ÁªÑ‰ª∂Á±ªÂûã */}
                <div>
                  <label className="block text-sm font-medium mb-2">ÁªÑ‰ª∂Á±ªÂûã</label>
                  <div className="grid grid-cols-2 gap-2">
                    {chartTypeOptions.map((option) => (
                      <Button
                        key={option.value}
                        variant={selectedComponent.type === option.value ? 'default' : 'outline'}
                        size="sm"
                        className="flex flex-col items-center gap-1 h-auto py-2"
                        onClick={() => handleChartTypeChange(option.value as ComponentLayout['type'])}
                      >
                        <span className="text-sm">{option.icon}</span>
                        <span className="text-xs">{option.label}</span>
                      </Button>
                    ))}
                  </div>
                </div>

                {/* Ê†áÈ¢ò */}
                <div>
                  <label className="block text-sm font-medium mb-2">Ê†áÈ¢ò</label>
                  <Input
                    value={selectedComponent.title}
                    onChange={(e) => handleTitleChange(e.target.value)}
                    placeholder="ËæìÂÖ•ÁªÑ‰ª∂Ê†áÈ¢ò"
                  />
                </div>

                {/* ‰ΩçÁΩÆÂíåÂ∞∫ÂØ∏ */}
                <div>
                  <label className="block text-sm font-medium mb-2">‰ΩçÁΩÆÂíåÂ∞∫ÂØ∏</label>
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <label className="block text-xs text-slate-500 mb-1">XÂùêÊ†á</label>
                      <Input
                        type="number"
                        value={selectedComponent.position.x.toString()}
                        onChange={(e) => handleUpdate({
                          position: { ...selectedComponent.position, x: parseInt(e.target.value) || 0 }
                        })}
                        size="sm"
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-slate-500 mb-1">YÂùêÊ†á</label>
                      <Input
                        type="number"
                        value={selectedComponent.position.y.toString()}
                        onChange={(e) => handleUpdate({
                          position: { ...selectedComponent.position, y: parseInt(e.target.value) || 0 }
                        })}
                        size="sm"
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-slate-500 mb-1">ÂÆΩÂ∫¶</label>
                      <Input
                        type="number"
                        value={selectedComponent.size.width.toString()}
                        onChange={(e) => handleUpdate({
                          size: { ...selectedComponent.size, width: parseInt(e.target.value) || 200 }
                        })}
                        size="sm"
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-slate-500 mb-1">È´òÂ∫¶</label>
                      <Input
                        type="number"
                        value={selectedComponent.size.height.toString()}
                        onChange={(e) => handleUpdate({
                          size: { ...selectedComponent.size, height: parseInt(e.target.value) || 150 }
                        })}
                        size="sm"
                      />
                    </div>
                  </div>
                </div>
              </CardContent>
            )}
          </Card>

          {/* Ê†∑ÂºèËÆæÁΩÆ */}
          <Card>
            <CardHeader 
              className="pb-2 cursor-pointer"
              onClick={() => toggleSection('style')}
            >
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <Palette className="h-4 w-4" />
                  Ê†∑ÂºèËÆæÁΩÆ
                </CardTitle>
                {expandedSections.style ? (
                  <ChevronDown className="h-4 w-4" />
                ) : (
                  <ChevronRight className="h-4 w-4" />
                )}
              </div>
            </CardHeader>
            {expandedSections.style && (
              <CardContent className="pt-2 space-y-4">
                {/* ÈÖçËâ≤ÊñπÊ°à */}
                <div>
                  <label className="block text-sm font-medium mb-2">ÈÖçËâ≤ÊñπÊ°à</label>
                  <div className="space-y-2">
                    {colorSchemes.map((scheme) => (
                      <div
                        key={scheme.name}
                        className="flex items-center gap-2 p-2 rounded hover:bg-slate-50 cursor-pointer"
                        onClick={() => handleStyleUpdate({ colorScheme: scheme.colors })}
                      >
                        <div className="flex gap-1">
                          {scheme.colors.map((color, index) => (
                            <div
                              key={index}
                              className="w-4 h-4 rounded"
                              style={{ backgroundColor: color }}
                            />
                          ))}
                        </div>
                        <span className="text-sm">{scheme.name}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* ÂõæË°®‰∏ìÂ±ûËÆæÁΩÆ */}
                {selectedComponent.type === 'line-chart' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">ÊäòÁ∫øÂõæËÆæÁΩÆ</label>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showGrid"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleChartConfigUpdate({ showGrid: e.target.checked })}
                        />
                        <label htmlFor="showGrid" className="text-sm">ÊòæÁ§∫ÁΩëÊ†º</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showPoints"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleChartConfigUpdate({ showPoints: e.target.checked })}
                        />
                        <label htmlFor="showPoints" className="text-sm">ÊòæÁ§∫Êï∞ÊçÆÁÇπ</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showArea"
                          className="rounded"
                          defaultChecked={false}
                          onChange={(e) => handleChartConfigUpdate({ showArea: e.target.checked })}
                        />
                        <label htmlFor="showArea" className="text-sm">Èù¢ÁßØÂ°´ÂÖÖ</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="smooth"
                          className="rounded"
                          defaultChecked={false}
                          onChange={(e) => handleChartConfigUpdate({ smooth: e.target.checked })}
                        />
                        <label htmlFor="smooth" className="text-sm">Âπ≥ÊªëÊõ≤Á∫ø</label>
                      </div>
                    </div>
                  </div>
                )}

                {selectedComponent.type === 'bar-chart' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">Êü±Áä∂ÂõæËÆæÁΩÆ</label>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showValues"
                          className="rounded"
                          defaultChecked={false}
                          onChange={(e) => handleChartConfigUpdate({ showValues: e.target.checked })}
                        />
                        <label htmlFor="showValues" className="text-sm">ÊòæÁ§∫Êï∞ÂÄº</label>
                      </div>
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">Êü±Â≠êÊ†∑Âºè</label>
                        <select 
                          className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                          onChange={(e) => handleChartConfigUpdate({ barStyle: e.target.value })}
                        >
                          <option value="rounded">ÂúÜËßí</option>
                          <option value="square">ÊñπËßí</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">ÊñπÂêë</label>
                        <select 
                          className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                          onChange={(e) => handleChartConfigUpdate({ orientation: e.target.value })}
                        >
                          <option value="vertical">ÂûÇÁõ¥</option>
                          <option value="horizontal">Ê∞¥Âπ≥</option>
                        </select>
                      </div>
                    </div>
                  </div>
                )}

                {selectedComponent.type === 'pie-chart' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">È•ºÂõæËÆæÁΩÆ</label>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showLabels"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleChartConfigUpdate({ showLabels: e.target.checked })}
                        />
                        <label htmlFor="showLabels" className="text-sm">ÊòæÁ§∫Ê†áÁ≠æ</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showLegend"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleChartConfigUpdate({ showLegend: e.target.checked })}
                        />
                        <label htmlFor="showLegend" className="text-sm">ÊòæÁ§∫Âõæ‰æã</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showPercentage"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleChartConfigUpdate({ showPercentage: e.target.checked })}
                        />
                        <label htmlFor="showPercentage" className="text-sm">ÊòæÁ§∫ÁôæÂàÜÊØî</label>
                      </div>
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">ÂÜÖÂúÜÂçäÂæÑ (%)</label>
                        <input
                          type="range"
                          min="0"
                          max="80"
                          defaultValue="0"
                          className="w-full"
                          onChange={(e) => handleChartConfigUpdate({ innerRadius: Number(e.target.value) })}
                        />
                      </div>
                    </div>
                  </div>
                )}

                {selectedComponent.type === 'table' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">Êï∞ÊçÆË°®ËÆæÁΩÆ</label>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showHeader"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleTableConfigUpdate({ showHeader: e.target.checked })}
                        />
                        <label htmlFor="showHeader" className="text-sm">ÊòæÁ§∫Ë°®Â§¥</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showBorder"
                          className="rounded"
                          defaultChecked={false}
                          onChange={(e) => handleTableConfigUpdate({ showBorder: e.target.checked })}
                        />
                        <label htmlFor="showBorder" className="text-sm">ÊòæÁ§∫ËæπÊ°Ü</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showStripes"
                          className="rounded"
                          defaultChecked={false}
                          onChange={(e) => handleTableConfigUpdate({ showStripes: e.target.checked })}
                        />
                        <label htmlFor="showStripes" className="text-sm">ÊñëÈ©¨Á∫π</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="compact"
                          className="rounded"
                          defaultChecked={false}
                          onChange={(e) => handleTableConfigUpdate({ compact: e.target.checked })}
                        />
                        <label htmlFor="compact" className="text-sm">Á¥ßÂáëÊ®°Âºè</label>
                      </div>
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">ÊúÄÂ§ßË°åÊï∞</label>
                        <input
                          type="number"
                          min="3"
                          max="20"
                          defaultValue="6"
                          className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                          onChange={(e) => handleTableConfigUpdate({ maxRows: Number(e.target.value) })}
                        />
                      </div>
                    </div>
                  </div>
                )}

                {selectedComponent.type === 'kpi-card' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">ÊåáÊ†áÂç°ËÆæÁΩÆ</label>
                    <div className="space-y-2">
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">Âç°ÁâáÊ†∑Âºè</label>
                        <select 
                          className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                          onChange={(e) => handleKPIConfigUpdate({ style: e.target.value })}
                        >
                          <option value="modern">Áé∞‰ª£</option>
                          <option value="minimal">ÁÆÄÁ∫¶</option>
                          <option value="colorful">ÂΩ©Ëâ≤</option>
                        </select>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showIcon"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleKPIConfigUpdate({ showIcon: e.target.checked })}
                        />
                        <label htmlFor="showIcon" className="text-sm">ÊòæÁ§∫ÂõæÊ†á</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showTrend"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleKPIConfigUpdate({ showTrend: e.target.checked })}
                        />
                        <label htmlFor="showTrend" className="text-sm">ÊòæÁ§∫Ë∂ãÂäø</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showDescription"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleKPIConfigUpdate({ showDescription: e.target.checked })}
                        />
                        <label htmlFor="showDescription" className="text-sm">ÊòæÁ§∫ÊèèËø∞</label>
                      </div>
                    </div>
                  </div>
                )}

                {selectedComponent.type === 'gauge' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">‰ª™Ë°®ÁõòËÆæÁΩÆ</label>
                    <div className="space-y-2">
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">Ê†∑Âºè</label>
                        <select 
                          className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                          onChange={(e) => handleGaugeConfigUpdate({ style: e.target.value })}
                        >
                          <option value="modern">Áé∞‰ª£</option>
                          <option value="classic">ÁªèÂÖ∏</option>
                          <option value="minimal">ÁÆÄÁ∫¶</option>
                        </select>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showLabels"
                          className="rounded"
                          defaultChecked={true}
                          onChange={(e) => handleGaugeConfigUpdate({ showLabels: e.target.checked })}
                        />
                        <label htmlFor="showLabels" className="text-sm">ÊòæÁ§∫ÂàªÂ∫¶</label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          id="showThresholds"
                          className="rounded"
                          defaultChecked={false}
                          onChange={(e) => handleGaugeConfigUpdate({ showThresholds: e.target.checked })}
                        />
                        <label htmlFor="showThresholds" className="text-sm">ÊòæÁ§∫ÈòàÂÄº</label>
                      </div>
                    </div>
                  </div>
                )}

                {selectedComponent.type === 'container' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">ÂÆπÂô®ËÆæÁΩÆ</label>
                    <div className="space-y-2">
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">Â∏ÉÂ±ÄÊñπÂºè</label>
                        <select 
                          className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                          value={selectedComponent.containerConfig?.layout || 'flex'}
                          onChange={(e) => handleContainerConfigUpdate({ layout: e.target.value })}
                        >
                          <option value="flex">ÂºπÊÄßÂ∏ÉÂ±Ä</option>
                          <option value="grid">ÁΩëÊ†ºÂ∏ÉÂ±Ä</option>
                          <option value="absolute">ÁªùÂØπÂÆö‰Ωç</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">ÂÜÖËæπË∑ù (px)</label>
                        <input
                          type="number"
                          min="0"
                          max="50"
                          value={selectedComponent.containerConfig?.padding || 16}
                          className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                          onChange={(e) => handleContainerConfigUpdate({ padding: Number(e.target.value) })}
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">Èó¥Ë∑ù (px)</label>
                        <input
                          type="number"
                          min="0"
                          max="30"
                          value={selectedComponent.containerConfig?.gap || 12}
                          className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                          onChange={(e) => handleContainerConfigUpdate({ gap: Number(e.target.value) })}
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">ËæπÊ°ÜÊ†∑Âºè</label>
                        <select 
                          className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                          value={selectedComponent.containerConfig?.borderStyle || 'solid'}
                          onChange={(e) => handleContainerConfigUpdate({ borderStyle: e.target.value })}
                        >
                          <option value="solid">ÂÆûÁ∫ø</option>
                          <option value="dashed">ËôöÁ∫ø</option>
                          <option value="none">Êó†ËæπÊ°Ü</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">ËæπÊ°ÜÈ¢úËâ≤</label>
                        <input
                          type="color"
                          value={selectedComponent.containerConfig?.borderColor || '#e2e8f0'}
                          className="w-full h-8 border border-slate-200 rounded"
                          onChange={(e) => handleContainerConfigUpdate({ borderColor: e.target.value })}
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-slate-500 mb-1">ËÉåÊôØÈ¢úËâ≤</label>
                        <input
                          type="color"
                          value={selectedComponent.containerConfig?.backgroundColor || '#ffffff'}
                          className="w-full h-8 border border-slate-200 rounded"
                          onChange={(e) => handleContainerConfigUpdate({ backgroundColor: e.target.value })}
                        />
                      </div>
                    </div>
                  </div>
                )}

                {/* ÈÄöÁî®ËÉåÊôØËÆæÁΩÆ */}
                <div>
                  <label className="block text-sm font-medium mb-2">ËÉåÊôØ</label>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        id="showBackground"
                        className="rounded"
                        defaultChecked={true}
                        onChange={(e) => handleStyleUpdate({ showBackground: e.target.checked })}
                      />
                      <label htmlFor="showBackground" className="text-sm">ÊòæÁ§∫ËÉåÊôØ</label>
                    </div>
                    <div className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        id="showBorder"
                        className="rounded"
                        defaultChecked={true}
                        onChange={(e) => handleStyleUpdate({ showBorder: e.target.checked })}
                      />
                      <label htmlFor="showBorder" className="text-sm">ÊòæÁ§∫ËæπÊ°Ü</label>
                    </div>
                    <div className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        id="showShadow"
                        className="rounded"
                        defaultChecked={false}
                        onChange={(e) => handleStyleUpdate({ showShadow: e.target.checked })}
                      />
                      <label htmlFor="showShadow" className="text-sm">ÊòæÁ§∫Èò¥ÂΩ±</label>
                    </div>
                  </div>
                </div>

                {/* ÈÄèÊòéÂ∫¶ */}
                <div>
                  <label className="block text-sm font-medium mb-2">ÈÄèÊòéÂ∫¶</label>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    defaultValue="100"
                    className="w-full"
                    onChange={(e) => handleStyleUpdate({ opacity: Number(e.target.value) / 100 })}
                  />
                </div>
              </CardContent>
            )}
          </Card>

          {/* Êï∞ÊçÆÈÖçÁΩÆ */}
          <Card>
            <CardHeader 
              className="pb-2 cursor-pointer"
              onClick={() => toggleSection('data')}
            >
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <Database className="h-4 w-4" />
                  Êï∞ÊçÆÈÖçÁΩÆ
                </CardTitle>
                {expandedSections.data ? (
                  <ChevronDown className="h-4 w-4" />
                ) : (
                  <ChevronRight className="h-4 w-4" />
                )}
              </div>
            </CardHeader>
            {expandedSections.data && (
              <CardContent className="pt-2 space-y-4">

                {/* ÊåáÊ†áËÆæÁΩÆ */}
                <div>
                  <label className="block text-sm font-medium mb-2">ÊåáÊ†á</label>
                  <DropZone 
                    type="metrics"
                    items={selectedComponent.dataConfig?.metrics || []}
                    onDrop={handleMetricDrop}
                    onRemove={handleRemoveMetric}
                    placeholder="‰ªéÊï∞ÊçÆÈõÜÈù¢ÊùøÊãñÊãΩÂ∫¶ÈáèÂ≠óÊÆµÂà∞ËøôÈáå"
                  />
                </div>

                {/* Áª¥Â∫¶ËÆæÁΩÆ */}
                <div>
                  <label className="block text-sm font-medium mb-2">Áª¥Â∫¶</label>
                  <DropZone 
                    type="dimensions"
                    items={selectedComponent.dataConfig?.dimensions || []}
                    onDrop={handleDimensionDrop}
                    onRemove={handleRemoveDimension}
                    placeholder="‰ªéÊï∞ÊçÆÈõÜÈù¢ÊùøÊãñÊãΩÁª¥Â∫¶Â≠óÊÆµÂà∞ËøôÈáå"
                  />
                </div>

                {/* ËøáÊª§Âô® */}
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="block text-sm font-medium">ËøáÊª§Âô®</label>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="h-6 text-xs"
                      onClick={handleAddFilter}
                    >
                      <Plus className="h-3 w-3 mr-1" />
                      Ê∑ªÂä†
                    </Button>
                  </div>
                  
                  {filters.length === 0 ? (
                    <div className="text-sm text-slate-500 text-center py-4 border border-dashed border-slate-200 rounded">
                      ÊöÇÊó†ËøáÊª§Âô®
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {filters.map((filter) => (
                        <div key={filter.id} className="p-3 border border-slate-200 rounded-lg space-y-2">
                          {/* Â≠óÊÆµÈÄâÊã© */}
                          <div>
                            <label className="block text-xs text-slate-500 mb-1">Â≠óÊÆµ</label>
                            <select 
                              className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                              value={filter.field}
                              onChange={(e) => handleUpdateFilter(filter.id, { field: e.target.value })}
                            >
                              <option value="">ÈÄâÊã©Â≠óÊÆµ</option>
                              {/* ÊòæÁ§∫ÊâÄÊúâÂèØÁî®ÁöÑÁª¥Â∫¶ÂíåÊåáÊ†á */}
                              {selectedComponent.dataConfig?.dimensions?.map((dim) => (
                                <option key={`dim-${dim}`} value={dim}>{dim} (Áª¥Â∫¶)</option>
                              ))}
                              {selectedComponent.dataConfig?.metrics?.map((metric) => (
                                <option key={`metric-${metric}`} value={metric}>{metric} (ÊåáÊ†á)</option>
                              ))}
                            </select>
                          </div>
                          
                          {/* Êìç‰ΩúÁ¨¶ÈÄâÊã© */}
                          <div className="flex gap-2">
                            <div className="flex-1">
                              <label className="block text-xs text-slate-500 mb-1">Êù°‰ª∂</label>
                              <select 
                                className="w-full h-8 px-2 py-1 border border-slate-200 rounded text-sm"
                                value={filter.operator}
                                onChange={(e) => handleUpdateFilter(filter.id, { operator: e.target.value })}
                              >
                                <option value="=">Á≠â‰∫é</option>
                                <option value="!=">‰∏çÁ≠â‰∫é</option>
                                <option value=">">Â§ß‰∫é</option>
                                <option value=">=">Â§ß‰∫éÁ≠â‰∫é</option>
                                <option value="<">Â∞è‰∫é</option>
                                <option value="<=">Â∞è‰∫éÁ≠â‰∫é</option>
                                <option value="like">ÂåÖÂê´</option>
                                <option value="not like">‰∏çÂåÖÂê´</option>
                                <option value="in">Âú®ËåÉÂõ¥ÂÜÖ</option>
                                <option value="not in">‰∏çÂú®ËåÉÂõ¥ÂÜÖ</option>
                              </select>
                            </div>
                            
                            {/* Âà†Èô§ÊåâÈíÆ */}
                            <div className="flex items-end">
                              <Button 
                                variant="ghost" 
                                size="icon"
                                className="h-8 w-8 text-red-500 hover:text-red-700 hover:bg-red-50"
                                onClick={() => handleRemoveFilter(filter.id)}
                              >
                                <Trash2 className="h-3 w-3" />
                              </Button>
                            </div>
                          </div>
                          
                          {/* ÂÄºËæìÂÖ• */}
                          <div>
                            <label className="block text-xs text-slate-500 mb-1">ÂÄº</label>
                            {filter.operator === 'in' || filter.operator === 'not in' ? (
                              <Input
                                placeholder="Áî®ÈÄóÂè∑ÂàÜÈöîÂ§ö‰∏™ÂÄºÔºåÂ¶Ç: ÂÄº1,ÂÄº2,ÂÄº3"
                                value={filter.value}
                                onChange={(e) => handleUpdateFilter(filter.id, { value: e.target.value })}
                                size="sm"
                              />
                            ) : (
                              <Input
                                placeholder="ËæìÂÖ•ËøáÊª§ÂÄº"
                                value={filter.value}
                                onChange={(e) => handleUpdateFilter(filter.id, { value: e.target.value })}
                                size="sm"
                              />
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </CardContent>
            )}
          </Card>

          {/* È´òÁ∫ßËÆæÁΩÆ */}
          <Card>
            <CardHeader 
              className="pb-2 cursor-pointer"
              onClick={() => toggleSection('advanced')}
            >
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium">È´òÁ∫ßËÆæÁΩÆ</CardTitle>
                {expandedSections.advanced ? (
                  <ChevronDown className="h-4 w-4" />
                ) : (
                  <ChevronRight className="h-4 w-4" />
                )}
              </div>
            </CardHeader>
            {expandedSections.advanced && (
              <CardContent className="pt-2 space-y-4">
                {/* Âà∑Êñ∞ËÆæÁΩÆ */}
                <div>
                  <label className="block text-sm font-medium mb-2">Ëá™Âä®Âà∑Êñ∞</label>
                  <select className="w-full h-10 px-3 py-2 border border-slate-200 rounded-md text-sm">
                    <option value="0">ÂÖ≥Èó≠</option>
                    <option value="30">30Áßí</option>
                    <option value="60">1ÂàÜÈíü</option>
                    <option value="300">5ÂàÜÈíü</option>
                    <option value="900">15ÂàÜÈíü</option>
                  </select>
                </div>

                {/* ÁºìÂ≠òËÆæÁΩÆ */}
                <div>
                  <div className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      id="enableCache"
                      className="rounded"
                      defaultChecked={true}
                    />
                    <label htmlFor="enableCache" className="text-sm">ÂêØÁî®ÁºìÂ≠ò</label>
                  </div>
                </div>

                {/* ÂØºÂá∫ËÆæÁΩÆ */}
                <div>
                  <div className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      id="allowExport"
                      className="rounded"
                      defaultChecked={true}
                    />
                    <label htmlFor="allowExport" className="text-sm">ÂÖÅËÆ∏ÂØºÂá∫</label>
                  </div>
                </div>
              </CardContent>
            )}
          </Card>
        </div>
      </div>

      {/* Â∫ïÈÉ®Êìç‰ΩúÊåâÈíÆ */}
      <div className="border-t border-slate-200 p-4 flex-shrink-0">
        <div className="flex gap-2">
          <Button variant="outline" size="sm" className="flex-1">
            ÈáçÁΩÆ
          </Button>
          <Button size="sm" className="flex-1">
            Â∫îÁî®
          </Button>
        </div>
      </div>
    </div>
  )
}